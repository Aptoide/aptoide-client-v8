apply plugin: 'com.android.library'
apply plugin: 'io.fabric'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

buildscript {
  repositories {
    maven { url "https://maven.fabric.io/public" }
  }
  dependencies {
    classpath "io.fabric.tools:gradle:${FABRIC_VERSION}"
  }
}

android {
  compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {
    minSdkVersion project.MINIMUM_SDK_VERSION
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
//Local libraries
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  api project(path: ':aptoide-analytics-core')

//Support libraries
  implementation "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"

// Network
  implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"
  implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
  api "com.squareup.retrofit2:adapter-rxjava:${RETROFIT_VERSION}"
  implementation "io.reactivex:rxjava:${RXJAVA_VERSION}"

// Analytics
  implementation "com.facebook.android:facebook-core:${FACEBOOK_ANDROID_SDK_VERSION}"
  implementation "com.flurry.android:analytics:${FLURRY_SDK_VERSION}"
  implementation("com.crashlytics.sdk.android:crashlytics:${CRASHLYTICS_VERSION}@aar", {
    transitive = true
  })

//Test
  testImplementation "junit:junit:${JUNIT_VERSION}"
  testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
}

version = "1.0.3"

//region Publishing
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier "sources"
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

  failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      groupId 'aptoide-client-v8'
      artifactId project.name
      version project.version
      artifact(sourcesJar)
      artifact(javadocJar)
      artifact("$buildDir/outputs/aar/${project.name}-release.aar")

      //The publication doesn't know about our dependencies, so we have to manually add them to the pom
      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        //Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
        configurations.api.allDependencies.each {
          def dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', it.group)
          dependencyNode.appendNode('artifactId', it.name)
          dependencyNode.appendNode('version', it.version)
        }
      }
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}

bintray {
  user = "${APTOIDE_BINTRAY_USER}"
  key = "${APTOIDE_BINTRAY_KEY}"
  publications = ['MyPublication']
  pkg {
    repo = 'Aptoide'
    name = "${project.name}"
    licenses = ['GPL-3.0']
    vcsUrl = 'https://github.com/Aptoide/aptoide-client-v8'

    version {
      name = project.version
    }
  }
}
//endregion