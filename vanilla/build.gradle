buildscript {

  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.22.0'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.getkeepsafe.dexcount'

retrolambda {
  jvmArgs '-noverify'
}

android {

  compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
  buildToolsVersion BUILD_TOOLS_VERSION

  // keep the "applicationId" var in third place for the jenkins build script hack
  defaultConfig {
    applicationId "${APPLICATION_ID}"
    minSdkVersion project.MINIMUM_SDK_VERSION
    targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
    manifestPlaceholders = [toolboxProviderAuthority        : "cm.aptoide.pt.StubProvider",
                            suggestionProviderAuthority     : "cm.aptoide.pt.v8engine.provider.SearchSuggestionProvider",
                            storeSuggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.StoreSearchSuggestionProvider",
                            currentApplicationId            : "cm.aptoide.pt",
                            fabricApiKey                    : project.FABRIC_API_KEY]

    multiDexEnabled true
    resValue "string", "authenticator_account_type", APPLICATION_ID
    versionCode project.PROD_VERSION_CODE.toInteger()
    versionName "8.3.0.1"
    resValue "string", "content_authority", APPLICATION_ID + ".StubProvider"
    buildConfigField "String", "CONTENT_AUTHORITY", "\"" + APPLICATION_ID + ".StubProvider\""
    // test default configs
    testProguardFile 'proguard-rules-test.pro'
    //testInstrumentationRunner "cm.aptoide.pt.MultidexAndroidJunitRunner"
    //testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  lintOptions {
    abortOnError false
  }

  signingConfigs {
    release {
      storeFile = file(project.STORE_FILE)
      storePassword = project.STORE_PASSWORD
      keyAlias = project.KEY_ALIAS
      keyPassword = project.KEY_PASSWORD
      v2SigningEnabled = false
    }
  }

  productFlavors {

    internal {
      // applicationIdSuffix does not work properly, as the application ID gets changed after the buildFlavor
      applicationIdSuffix ".internal"

      versionName "8.3.0." + getDate()
      versionCode project.INTERNAL_VERSION_CODE.toInteger()

      resValue "string", "authenticator_account_type", APPLICATION_ID + ".internal"
      resValue "string", "content_authority", APPLICATION_ID + ".StubProvider.internal"
      buildConfigField "String", "CONTENT_AUTHORITY",
          "\"" + APPLICATION_ID + ".StubProvider.internal\""

      manifestPlaceholders = [toolboxProviderAuthority        : "cm.aptoide.pt.StubProvider.internal",
                              suggestionProviderAuthority     : "cm.aptoide.pt.v8engine.provider.SearchSuggestionProvider.internal",
                              storeSuggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.StoreSearchSuggestionProvider.internal",
                              currentApplicationId            : "cm.aptoide.pt.internal"]
    }

    dev {
      // applicationIdSuffix does not work properly, as the application ID gets changed after the buildFlavor
      applicationIdSuffix ".dev"


      versionName "8.3.0." + getDate()
      versionCode project.DEV_VERSION_CODE.toInteger()

      resValue "string", "authenticator_account_type", APPLICATION_ID + ".dev"
      resValue "string", "content_authority", APPLICATION_ID + ".StubProvider.dev"
      buildConfigField "String", "CONTENT_AUTHORITY", "\"" + APPLICATION_ID + ".StubProvider.dev\""

      manifestPlaceholders = [toolboxProviderAuthority        : "cm.aptoide.pt.StubProvider.dev",
                              suggestionProviderAuthority     : "cm.aptoide.pt.v8engine.provider.SearchSuggestionProvider.dev",
                              storeSuggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.StoreSearchSuggestionProvider.dev",
                              currentApplicationId            : "cm.aptoide.pt.dev"]
    }

    prod {}

    leak {}
  }

  buildTypes {
    release {
      buildConfigField "boolean", "CRASH_REPORTS_DISABLED", "false"
      zipAlignEnabled true
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt')
      signingConfig signingConfigs.release
    }

    debug {
      buildConfigField "boolean", "CRASH_REPORTS_DISABLED", "true"
      ext.enableCrashlytics = false
      zipAlignEnabled false
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/LGPL2.1'
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def project = "vanilla"
      def SEP = "_"
      def flavor = variant.productFlavors[0].name
      def buildType = variant.variantData.variantConfiguration.buildType.name
      def versionName = variant.versionName
      def versionCode = variant.versionCode

      def newApkName = project + SEP +
          flavor +
          SEP +
          buildType +
          SEP +
          versionName +
          SEP +
          versionCode +
          ".apk"

      output.outputFile = new File(output.outputFile.parent, newApkName)
    }
  }

  dexOptions {
    dexInProcess = project.APTOIDE_DEX_IN_PROCESS
    preDexLibraries = project.APTOIDE_PRE_DEX_LIBRARIES
    javaMaxHeapSize = project.APTOIDE_DEX_JAVA_MAX_HEAP_SIZE
  }
}

dependencies {

  devCompile project(path: ':v8engine', configuration: 'prodRelease')
  prodCompile project(path: ':v8engine', configuration: 'prodRelease')
  leakCompile project(path: ':v8engine', configuration: 'leakRelease')
  internalCompile project(path: ':v8engine', configuration: 'internalRelease')

  // Testing-only dependencies
  testCompile "junit:junit:${JUNIT_VERSION}"
  testCompile "org.robolectric:robolectric:${ROBOELECTRIC_VERSION}"
  testCompile "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
  // Force usage of support annotations in the test app, since it is internally used by the runner module.
  androidTestCompile("com.android.support.test:runner:${RUNNER_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support.test:rules:${RULES_VERSION}"
  androidTestCompile("com.android.support:multidex-instrumentation:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support:support-annotations:${SUPPORT_LIB_VERSION}"

  //androidTestCompile "io.reactivex:rxjava:${RXJAVA_VERSION}"
  compile "io.reactivex:rxjava:${RXJAVA_VERSION}"

  androidTestCompile("com.android.support:multidex:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }

  compile("com.android.support:multidex:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
}

String getDate() {
  def date = new Date()
  def formattedDate = date.format('yyyyMMdd')
  return formattedDate
}
