apply plugin: 'com.android.library'

android {
  compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {
    minSdkVersion project.MINIMUM_SDK_VERSION
  }

  flavorDimensions "mode"
  productFlavors {
    internal {
      dimension "mode"
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SCHEME",
        "\"" + project.APTOIDE_WEB_SERVICES_SCHEME_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_HOST_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_V7_HOST_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_APTWORDS_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_APTWORDS_HOST_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_WRITE_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_WRITE_V7_HOST_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_NOTIFICATION_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_NOTIFICATION_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_READ_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_READ_V7_HOST_DEVELOPMENT + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SEARCH_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_SEARCH_NO_SSL_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SEARCH_SSL_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_SEARCH_SSL_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_AB_TESTING_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_AB_TESTING_HOST + "\""
      matchingFallbacks = ['internal', 'prod']
    }
    prod {
      dimension "mode"
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SCHEME",
        "\"" + project.APTOIDE_WEB_SERVICES_SCHEME_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_HOST_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_V7_HOST_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_APTWORDS_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_APTWORDS_HOST_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_WRITE_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_WRITE_V7_HOST_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_NOTIFICATION_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_NOTIFICATION_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_READ_V7_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_READ_V7_HOST_PRODUCTION + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SEARCH_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_SEARCH_NO_SSL_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_SEARCH_SSL_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_SEARCH_SSL_HOST + "\""
      buildConfigField "String", "APTOIDE_WEB_SERVICES_AB_TESTING_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_AB_TESTING_HOST + "\""
      matchingFallbacks = ['prod', 'internal']
    }
  }

  testOptions {
    unitTests.all {
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/*'
  }
}

dependencies {
//Local libraries
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation project(path: ':aptoide-preferences')
  implementation project(path: ':crashreports')
  compileOnly project(path: ':utils')

//Support libraries
  implementation "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"

// Google Play Services
  implementation "com.google.android.gms:play-services-base:${PLAY_SERVICES_VERSION}"

//RxJava
  implementation "io.reactivex:rxjava:${RXJAVA_VERSION}"
  implementation "io.reactivex:rxandroid:${RXANDROID_VERSION}"
  implementation "nl.littlerobots.rxlint:rxlint:${RX_LINT_VERSION}"
  implementation "com.artemzin.rxjava:proguard-rules:${RXJAVA_PROGUARD_RULES_VERSION}"

//Network
  implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
  implementation "com.squareup.retrofit2:adapter-rxjava:${RETROFIT_VERSION}"
  implementation "com.squareup.retrofit2:converter-jackson:${RETROFIT_VERSION}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}"
  implementation "com.squareup.okhttp3:logging-interceptor:${OKHTTP_LOGGING_INTERCEPTOR_VERSION}"

//Parceler
  compileOnly "org.parceler:parceler-api:${PARCELER_VERSION}"
  annotationProcessor "org.parceler:parceler:${PARCELER_VERSION}"

//Test
  testImplementation "junit:junit:${JUNIT_VERSION}"
  testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
  testImplementation "com.android.support.test:testing-support-lib:${TESTING_SUPPORT_LIB_VERSION}"
  testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP_MOCKWEBSERVER_VERSION}"
}
