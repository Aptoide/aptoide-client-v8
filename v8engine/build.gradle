apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

retrolambda {
  jvmArgs '-noverify'
}

android {

  // Websockets
  useLibrary 'org.apache.http.legacy'

  compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {
    minSdkVersion project.MINIMUM_SDK_VERSION
    consumerProguardFiles "proguard-rules-consumer.pro"

    buildConfigField "String", "BACKUP_SIGNATURE", "\"" + project.BACKUP_SIGNATURE + "\""
    buildConfigField "String", "UPLOADER_SIGNATURE", "\"" + project.UPLOADER_SIGNATURE + "\""
    buildConfigField "String", "SIXPACK_USER", "\"" + project.SIXPACK_USER + "\""
    buildConfigField "String", "SIXPACK_PASSWORD", "\"" + project.SIXPACK_PASSWORD + "\""
    buildConfigField "String", "APTOIDE_WEB_SERVICES_SIXPACK_HOST",
        "\"" + project.APTOIDE_WEB_SERVICES_SIXPACK_HOST + "\""
    buildConfigField "String", "GOOGLE_SENDER_ID", "\"" + project.GOOGLE_SENDER_ID + "\""

    buildConfigField "String", "GMS_SERVER_ID", "\"" + project.GMS_SERVER_ID + "\""
    resValue "string", "facebook_app_id", "\"" + project.FACEBOOK_APP_ID + "\""
    buildConfigField "String", "PAYPAL_ENVIRONMENT", "\"" + project.PAYPAL_ENVIRONMENT_LIVE + "\""
    buildConfigField "int", "DEFAULT_PAYMENT_ID", project.DEFAULT_PAYMENT_ID
    buildConfigField "String", "PAYPAL_KEY", "\"" + project.PAYPAL_PRODUCTION_KEY + "\""
    buildConfigField "String", "APTOIDE_WEBSOCKETS_SCHEME",
        "\"" + project.APTOIDE_WEBSOCKETS_SCHEME + "\""
    buildConfigField "String", "APTOIDE_WEBSOCKETS_HOST",
        "\"" + project.APTOIDE_WEBSOCKETS_HOST + "\""
    buildConfigField "String", "TWITTER_KEY", "\"" + project.TWITTER_KEY + "\""
    buildConfigField "String", "TWITTER_SECRET", "\"" + project.TWITTER_SECRET + "\""
    buildConfigField "int", "DEFAULT_SOCIAL_NOTIFICATION_SYNC_INTERVAL_MILLIS",
        project.DEFAULT_SOCIAL_NOTIFICATION_SYNC_INTERVAL_MILLIS
    buildConfigField "int", "CAMPAIGN_NOTIFICATION_SYNC_INTERVAL_MILLIS",
        project.CAMPAIGN_NOTIFICATION_SYNC_INTERVAL_MILLIS
    buildConfigField "int", "PAYMENT_AUTHORIZATION_SYNC_INTERVAL_MILLIS",
        project.PAYMENT_AUTHORIZATION_SYNC_INTERVAL_MILLIS
    buildConfigField "int", "PAYMENT_TRANSACTION_SYNC_INTERVAL_MILLIS",
        project.PAYMENT_TRANSACTION_SYNC_INTERVAL_MILLIS
    buildConfigField "int", "REALM_SCHEMA_VERSION",
        project.REALM_SCHEMA_VERSION
    buildConfigField "String", "REALM_FILE_NAME", "\"" + project.REALM_FILE_NAME + "\""
    buildConfigField "int", "IN_BILLING_SUPPORTED_API_VERSION",
        project.IN_BILLING_SUPPORTED_API_VERSION


    multiDexEnabled true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  lintOptions {
    abortOnError false
  }

  publishNonDefault true

  productFlavors {
    internal {
      buildConfigField "String", "PAYPAL_ENVIRONMENT",
          "\"" + project.PAYPAL_ENVIRONMENT_SANDBOX + "\""
      buildConfigField "String", "PAYPAL_KEY", "\"" + project.PAYPAL_SANDBOX_KEY + "\""
      buildConfigField "String", "APTOIDE_WEBSOCKETS_SCHEME",
          "\"" + project.APTOIDE_WEBSOCKETS_SCHEME + "\""
      buildConfigField "String", "APTOIDE_WEBSOCKETS_HOST",
          "\"" + project.APTOIDE_WEBSOCKETS_HOST + "\""
      buildConfigField "String", "TWITTER_KEY", "\"" + project.TWITTER_KEY_INTERNAL + "\""
      buildConfigField "String", "TWITTER_SECRET",
          "\"" + project.TWITTER_SECRET_INTERNAL + "\""
    }

    prod {}

    leak {}
  }

  buildTypes {
    release {
      minifyEnabled false
      shrinkResources false
      buildConfigField "String", "FLURRY_KEY", "\"" + project.FLURRY_KEY + "\""
    }

    debug {
      minifyEnabled false
      shrinkResources false
      buildConfigField "String", "FLURRY_KEY", "\"" + project.FLURRY_DEBUG_KEY + "\""
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      res.srcDirs = ['src/main/res', 'src/main/res/deprecated']
    }
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/LGPL2.1'
  }
}

dependencies {

  //
  // inter-projects dependencies
  //

  compile project(path: ':aptoide-database', configuration: 'release')

  internalCompile project(path: ':dataprovider', configuration: 'internalRelease')
  internalCompile project(path: ':aptoide-account-manager', configuration: 'internalRelease')

  prodCompile project(path: ':dataprovider', configuration: 'prodRelease')
  prodCompile project(path: ':aptoide-account-manager', configuration: 'prodRelease')

  leakCompile project(path: ':dataprovider', configuration: 'prodRelease')
  leakCompile project(path: ':aptoide-account-manager', configuration: 'prodRelease')


  compile project(path: ':utils', configuration: 'release')
  compile project(path: ':crashreports', configuration: 'release')
  compile project(path: ':downloadmanager', configuration: 'release')

  //
  // custom libs in folders
  //

  compile fileTree(dir: 'libs', include: ['*.jar'])

  //
  // from remote repos
  //

  // Testing-only dependencies
  testCompile "junit:junit:${JUNIT_VERSION}"
  testCompile "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
  // Force usage of support annotations in the test app, since it is internally used by the runner module.
  androidTestCompile "junit:junit:${JUNIT_VERSION}"
  androidTestCompile("com.android.support.test:runner:${RUNNER_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support.test:rules:${RULES_VERSION}"
  androidTestCompile("com.android.support:multidex-instrumentation:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support:support-annotations:${SUPPORT_LIB_VERSION}"

  compile "com.android.support:support-annotations:${SUPPORT_LIB_VERSION}"

  //noinspection GradleDependency
  compile "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
  //noinspection GradleDependency
  // Cannot update or settings will crash :/
  compile "com.android.support:preference-v7:${SUPPORT_LIB_VERSION}"
  //noinspection GradleDependency
  compile "com.android.support:recyclerview-v7:${SUPPORT_LIB_VERSION}"
  //noinspection GradleDependency
  compile "com.android.support:palette-v7:${SUPPORT_LIB_VERSION}"
  //noinspection GradleDependency
  compile "com.android.support:support-v13:${SUPPORT_LIB_VERSION}"
  //noinspection GradleDependency
  compile "com.android.support:design:${SUPPORT_LIB_VERSION}"
  compile "com.android.support:cardview-v7:${SUPPORT_LIB_VERSION}"
  compile "com.android.support:customtabs:${SUPPORT_LIB_VERSION}"
  //compile "com.android.support:percent:${SUPPORT_LIB_VERSION}"

  provided "org.projectlombok:lombok:${LOMBOK_VERSION}"

  compile "com.jpardogo.materialtabstrip:library:${MATERIAL_TAB_STRIP_VERSION}"

  compile "com.trello:rxlifecycle:${TRELLO_RX_LIFECYCLE_VERSION}"
  // If you want pre-written Activities and Fragments you can subclass as providers
  compile "com.trello:rxlifecycle-components:${TRELLO_RX_LIFECYCLE_VERSION}"
  compile "com.jakewharton.rxrelay:rxrelay:${RX_RELAY}"

  //    Apagar
  compile "com.jakewharton.rxbinding:rxbinding:${JW_RX_BINDING_VERSION}"
  compile "com.jakewharton.rxbinding:rxbinding-design:${JW_RX_BINDING_VERSION}"
  compile "com.jakewharton.rxbinding:rxbinding-support-v4:${JW_RX_BINDING_VERSION}"
  compile "com.jakewharton.rxbinding:rxbinding-appcompat-v7:${JW_RX_BINDING_VERSION}"
  compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:${JW_RX_BINDING_VERSION}"

  // paypal SDK
  compile("com.paypal.sdk:paypal-android-sdk:${PAYPAL_SDK}") {
    exclude group: 'io.card'
  }

  // Flurry Android sdk
  compile "com.flurry.android:analytics:${FLURRY_VERSION}"

  // Remote install
  compile 'org.slf4j:slf4j-simple:1.7.21'
  compile 'org.slf4j:slf4j-api:1.7.21'
  compile 'org.jmdns:jmdns:3.5.1'

  //  Sixpack
  compile 'com.seatgeek:sixpack-java:0.4-SNAPSHOT'

  // Fabric
  compile("com.crashlytics.sdk.android:crashlytics:${CRASHLYTICS_VERSION}@aar") {
    transitive = true;
  }

  //lib phone number
  compile "com.googlecode.libphonenumber:libphonenumber:${LIB_PHONE_NUMBER_VERSION}"

  compile('com.twitter.sdk.android:twitter-core:2.3.0@aar') {
    transitive = true;
  }

  compile("com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}")

  // Parceler - https://github.com/johncarl81/parceler
  compile "org.parceler:parceler-api:${PARCELER_VERSION}"
  annotationProcessor "org.parceler:parceler:${PARCELER_VERSION}"

  compile "com.android.support.constraint:constraint-layout:${CONSTRAINT_LAYOUT_VERSION}"
  //noinspection GradleDependency
  compile "com.google.android.gms:play-services-basement:${PLAY_SERVICES_VERSION}"
  //noinspection GradleDependency
  compile "com.google.android.gms:play-services-auth:${PLAY_SERVICES_VERSION}"

  compile "com.facebook.android:facebook-android-sdk:${FACEBOOK_ANDROID_SDK_VERSION}"


  leakCompile "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY_VERSION}"
  compile project(path: ':spotandshare')


  compile "com.github.bumptech.glide:glide:${GLIDE_VERSION}"

  compile "com.braintreepayments.api:braintree:${BRAINTREE_VERSION}"
  compile "com.braintreepayments:card-form:${BRAINTREE_CARD_FORM_VERSION}"
}
